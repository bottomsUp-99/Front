1. 자바스크립트의 동작 원리
    실행 컨텍스트 이해
    각 코드 영역마다 실행컨텍스트를 생성한다.
    - 전역 코드 (golbal code)
        : 최상위 스코프이다.
        var 키워드로 선언된 전역변수와 함수 선언문으로 선언된 전역함수를 전역 객체의 프로퍼티와 메서드로 바인딩하려면 참조를 위해 전역 객체와 연결한다.
        연결된 후 코드 평가가 실행되고 통과하면 컨텍스트가 생성된다.

    - 함수 코드 (function code)
    - eval 코드 (built in 전역함수 aval 함수에 인수로 전달되어 실행되는 코드)
    - 모듈 코드 (module code) : 모듈내부의 함수, 클래스를 제외하고 나머지 코드

    1. 소스코드 작성
    2. 코드 평가 -> 코드를 실행하기 위한 준비(실행 컨텍스 생성 ==> 변수, 함수의 선언문만 먼저 실행하여 생성된 변수나 함수 식별자를 키로 관리) 후 스코프에 등록
    3. 선언문을 제외한 소스코드가 순차적으로 실행(런타임 실행)


    - 스코프를 기반으로 식별자
    - 식별자에 바인딩 값의 관리 방법
    - 호이스팅이 발생하는 이유
    - 클로저 동작 방식

2. 동기처리 프로그래밍 방식 vs 비동기 처리 프로그래밍 방식
    함수를 호출하면 함수토드는 평가되어서 함수 실행컨텍스트가 생성된다.
    생성된 함수 실행 컨텍스트는 실행 컨텍스틍에 push되고 pop되면서 코드가 실행된다.

    함수의 실행 순서는 실행 컨텍스트 스택으로 관리한다.

    자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다.
    : 실행할 수 있는 영영기 하나이기 때문에 동시에 2개 이상의 함수는 실행할 수 없다는 의미
        최상위 실행 컨텍스트가 아닌 나머지 컨텍스트는 대시 task 안에서 실행대기를 한다.
        자바스크립트 엔진은 한번에 하나의 태크스만 실행할 수 있다. => 싱글스레드 방식으로 동작

    - 동기 처리와 비동기 처리

    현재 실행중인 태스크가 종료할 때 까지 다음에 실행될 태스크가 대기하는 방식 => 동기 방식
    synchronous : 실행순서를 보장
    장점 : 앞 태스크가 종료될 때까지는 이후 태스크들이 블로킹되는 단점이 있다.
    //비동기 처리(asynchronous)
    //현재 실행중인 태스크가 종료되지 않는 상태라도, 다음 태스크를 곧바로 실행하는 방식
    //비동기 처리 수행함수는 콜백 패턴을 사용한다.
    //콜헬(callback hell)을 개선하기 위한 ==> 프로미스(promise)
    //타이머 함수 : setTimeout, setInterval, HTTP 요청, 이벤트 핸들러 ==> 비동기 처리 방식으로 동작한다.
    브라우저가 동작하는 방식은 여러가지 태스크가 동시에 처리되는 것처럼 보인다.
    자바스크립트의 동시성을 지원하기 때문이다. 동시성 지원 ==== 이벤트 이벤트 루푸(event loop) 기능
    이벤트 루프는 브라우저에 built in 되어 있다.
    - 이벤트 루프와 태스크(task) 큐 

3. Ajax란 무엇인가?
    -> 자바스크립트를 사용해서 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고 서버가 응답한 데이터를 수신하여 웹페이지에 동적으로 렌더링하는 프로그래밍 방식.
    -> Ajax는 브라우저에서 제공하는 Web API인 xmlHttpRequest 객체를 기반으로 동작한다.
    -> xmlHttpRequest 객체는 HTTP 비동기 통신을 위한 메서드와 프로퍼티를 제공한다.

    1. 변경할 부분만 갱신한다.
    2. 변경할 필요가 없는 부분은 다시 랜더링 하지 않는다.
    3. 클라이언트와 서버와 비동기 동작의 통신을 하기 때문에 서버에 요청을 보낸 이후 다른 태스크에 블로킹이 발생하지 않는다.
    - JSON
    - xmlHttpRequest(프로퍼티와 메서드)
        - 자바스크립트가 사용하는 HTTP 요청 객체 : Web API 제공
    - HTTP 요청 전송
    - HTTP 응답 처리