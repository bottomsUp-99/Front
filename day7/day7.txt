1. 함수
    자바스크립트에서 함수란?
    -> 문제 해결을 위한 논리적인 흐름을 문장으로 구현하고, 코드 블럭으로 감싸서 하나의 실행 단위로 정의한 것.

    함수를 사용하는 이유
    -> 문제 해결을 위해서 로직을 구현하고, 이를 재사용하기 위해

    - 함수는 함수 정의에 의해 생성된다.
    예시)
    function add(x, y){
        return x + y;
    }
    add(2, 5) //function call, invoke

    함수 리터럴
    -> 자바스크립트에서 함수는 객체 타입의 값
    -> 함수 리터럴은 function 키워드, 함수 이름, 매개변수, 함수 몸체(body) 으로 구성된다.
    let func1 = function add(x, y){         //함수 리터럴을 변수 func1에 할당하였다.
        return x + y;
        }

    결론 : 사람이 이해할 수 있는 문자 or 약속기호 사용하여 값을 생성하는 표기방식(값을 생성하기 위한 표기법)

    함수 리터럴
    1. 함수 정의
        - 선언, 표현식, 함수 생성 시점, 함수 호이스팅
        - function 생성자 함수
        - 화살표 함수

        function add(x, y) {
        return x + y;
        }  -> 함수 선언문 정의
        var sub = function (x, y) {
        return x - y;
        }  -> 함수 표현식 정의

        함수 선언문 함수: 런타임 이전에 자바 스크립트 엔진에 의해 먼저 실행됨
                        -> 런타임 이전에 함수객체 생성
                            자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 생성하고 생성된 함수 객체를 할당
                            함수 선언문이 코드의 끌올처험 동작하는 자바스크립트 고유의 특징을 호이스팅이라고 한다.
        
        결론 : 함수 선언문 함수와 함수 표현식 함수는 함수의 생성 시점이 다르다.
        변수에 함수 리터럴이 할당 -> 런타임에 실행된다.

        REST API 프로젝트에서는 함수 표현식을 이용하여 작업

        let add1 = (
        function () {
            let a = 10;
            return function (x, y) {
                return x + y + a;
            };
        }
        ()
        );

        function ask(question, yes, no){
            if (confirm(question)) yes()
            else no;
        }
==============================화살표로 바꾸기==========================================
        ask(
            "동의하십니까?",
            function() {alert("동의하셨습니다.");},
            function() {alert("취소 버튼을 누르셨습니다.");}
        )

        ask(
            "동의하십니까?",
            () => {alert("동의하셨습니다.");},
            () => {alert("취소 버튼을 누르셨습니다.");}
        )
=======================================================================================
==============================화살표로 바꾸기==========================================
        function sum(a, b) {let result = a+b; return result;}

        let sum = (a, b) => a + b;
=======================================================================================

        - alert() : 메시지 보여주기(확인창, 모달(modal))
        - prompt : 사용자에게 텍스트를 입력하라는 메세지를 띄우고 확인. 사용자가 입력한 문자열이 반환, 취소(null 반환)
        - confirm() : 사용자가 확인 또는 취소 버튼을 누를 때까지 메시지 창이 보여지고 확인 버튼(true), 취소(false)

        문제 1. 사용자에게 이름을 물어보고, 입력받은 이름을 그대로 출력하는 페이지(hello.html)
        문제 2. I am happy 세 단어를 status 배열로 생성하세요.
        문제 3. status 에서 am 단어를 삭제하세요.
        문제 4. am이 삭제되었는지 확인하세요.
        문제 5. status 배열의 길이를 확인하세요.

        <script>
        let name = prompt('당신의 이름을 입력하세요!!', "");
        alert(name);
        let status = ['I', 'am', 'happy'];
        alert(status.length);
        // delete status[1];
        status.splice(1,1);
        alert(status[1]);
        alert(status.length);
        alert(status);
        </script>

        문제 1. I study Javascript right now 5개의 단어를 배열 keyword로 생성.
        문제 2. 키워드에서 처음 두 개의 단어를 삭제.
        문제 3. 삭제 완료된 key word 내용 확인 ㄱㄱ
        <script>
        let keyword = ['I', 'study', 'Javascript', 'right', 'now'];
        alert(keyword);
        let removed = keyword.splice(0, 2);
        alert(keyword);
        let update = keyword.splice(0, 0, 'I', 'play');
        alert(keyword);

        let unsigned = keyword.splice(-1, 0, 'lala', 'oops');
        alert(keyword)
        </script>

        문제 1. 배열 numberSet 1,2 생성
        문제 2. numberSet에 3,4 추가하여 새로운 배열 생성 후 확인
        문제 3. 1,2,3,4,5,6까지로 변경

        <script>
        let numberSet = [1,2];
        alert(numberSet);
        alert(numberSet.concat([3,4]));
        let numberSetAll = (numberSet.concat([3,4],[5,6]));
        numberSet.forEach(alert);
        numberSetAll.forEach(alert);
        numberSetAll.forEach((item, index, array) =>{
            alert(`${item} is at index ${item} in ${array}`);
        })
        </script>


        추가)
        <script>
        let dummy = [1, 0, false];
        alert(dummy.indexOf(0));
        alert(dummy.indexOf(false));
        alert(dummy.indexOf(null));
        alert(dummy.includes(1));
        //자바스크립트는 항등연산자 === (완전항등비교)
        const dummy1 = [NaN];
        alert(dummy1.indexOf(NaN));
        alert(dummy1.includes(NaN));
        </script>


    2. 함수 호출
        - 매개변수와 인수
        - 인수 확인
        - 매개변수의 최대 갯수
        - 반환문

    3. 참조에 의해서 전달되는 값, 상태 변경

    4. JSON과 JSON 처리 메서드
        복잡한 객체를 다룰것.
        네트워크를 통해 어딘가로 보내거나, 로깅 목적으로 객체를 출력해야 하는 상황
        객체를 문자열로 전환하여 처리해야 한다.

        <script>
        //이름은 Jon, 나이는 30, 회사는 SSGINC. 이 사람의 정보를 user라는 객체로 생성해주세요.
        let user = {
            name : 'Jon',
            age : 30,
            company : 'SSGINC',
            toString(){
                return `{name : "${this.name}", age : "${this.age}", company : "${this.company}"}`;
            }
        };
        alert(user);
        </script>

        JSON(Javascript Object Notation) : 값이나 객체를 나타내는 데이터 범용 포멧(RFC1627)
        - JSON.stringify : 객체를 JSON으로 변환
        - JSON.parse : JSON을 객체로 변환

        연습 1) 숫자 1을 JSON으로 인코딩하고 결과를 출력해주세용
        alert(JSON.stringify(1));

        연습 2) 'test'문자열, true [1,2,3,4,5]

2. 다양한 함수
    - 즉시 실행 함수 : 함수 정의와 동시에 호출되는 함수. 단 한번 호출해서 다시 호출 불가
    - 재귀 함수 : 자기 자신을 호출(recursive call)

    function factorial(number) {
    if(number <= 1) return 1;
    return number * factorial(number - 1);
    }

    function facotrial(number) {
    if (number <= 1) return 1;
    let result = number;
    while (--number) result *= number;
    return result;
    }

    - 중첩 함수
    함수 내에 함수를 정의한 함수를 중첩함수(nested function, inner function)
    중첩 함수는 외부 함수 내부에서만 호출 가능

    function outer() {
    let x = 1;
    function inner() {
        let y = 2;
        console.log(x + y);
    }
    inner();
    }

    - 콜백 함수
    함수의 매개변수를 통해서 다른 함수의 내부로 전달되는 함수.
    매개변수를 통해서 함수의 외부에서 콜백함수를 전달받은 함수
    Higher-Order-Function(HOF)

    콜백함수는 고차함수에 의해 호출되고, 이때 고차함수는 필요에 따라서 콜백함수에 원하는 인수를 전달 할 수 있다.

3. 클로저, 실행 컨텍스트

4. DOM

5. 정규 표현

6. 이벤트

7. 비동기 프로그래밍

8. Ajax

9. Rest API

10. 프로미스

11. 제너레이터 async/await

12. 에러 처리